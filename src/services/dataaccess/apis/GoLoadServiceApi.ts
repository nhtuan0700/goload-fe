/* tslint:disable */
/* eslint-disable */
/**
 * api/go_load.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GoLoadCreateAccountRequest,
  GoLoadCreateAccountResponse,
  GoLoadCreateDownloadTaskRequest,
  GoLoadCreateDownloadTaskResponse,
  GoLoadCreateSessionRequest,
  GoLoadCreateSessionResponse,
  GoLoadDeleteDownloadTaskRequest,
  GoLoadGetDownloadTaskFileRequest,
  GoLoadGetDownloadTaskListRequest,
  GoLoadGetDownloadTaskListResponse,
  GoLoadUpdateDownloadTaskRequest,
  GoLoadUpdateDownloadTaskResponse,
  RpcStatus,
  StreamResultOfGoLoadGetDownloadTaskFileResponse,
  StreamResultOfGoLoadStreamResponse,
} from '../models/index';
import {
    GoLoadCreateAccountRequestFromJSON,
    GoLoadCreateAccountRequestToJSON,
    GoLoadCreateAccountResponseFromJSON,
    GoLoadCreateAccountResponseToJSON,
    GoLoadCreateDownloadTaskRequestFromJSON,
    GoLoadCreateDownloadTaskRequestToJSON,
    GoLoadCreateDownloadTaskResponseFromJSON,
    GoLoadCreateDownloadTaskResponseToJSON,
    GoLoadCreateSessionRequestFromJSON,
    GoLoadCreateSessionRequestToJSON,
    GoLoadCreateSessionResponseFromJSON,
    GoLoadCreateSessionResponseToJSON,
    GoLoadDeleteDownloadTaskRequestFromJSON,
    GoLoadDeleteDownloadTaskRequestToJSON,
    GoLoadGetDownloadTaskFileRequestFromJSON,
    GoLoadGetDownloadTaskFileRequestToJSON,
    GoLoadGetDownloadTaskListRequestFromJSON,
    GoLoadGetDownloadTaskListRequestToJSON,
    GoLoadGetDownloadTaskListResponseFromJSON,
    GoLoadGetDownloadTaskListResponseToJSON,
    GoLoadUpdateDownloadTaskRequestFromJSON,
    GoLoadUpdateDownloadTaskRequestToJSON,
    GoLoadUpdateDownloadTaskResponseFromJSON,
    GoLoadUpdateDownloadTaskResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    StreamResultOfGoLoadGetDownloadTaskFileResponseFromJSON,
    StreamResultOfGoLoadGetDownloadTaskFileResponseToJSON,
    StreamResultOfGoLoadStreamResponseFromJSON,
    StreamResultOfGoLoadStreamResponseToJSON,
} from '../models/index';

export interface GoLoadServiceCreateAccountRequest {
    body: GoLoadCreateAccountRequest;
}

export interface GoLoadServiceCreateDownloadTaskRequest {
    body: GoLoadCreateDownloadTaskRequest;
}

export interface GoLoadServiceCreateSessionRequest {
    body: GoLoadCreateSessionRequest;
}

export interface GoLoadServiceDeleteDownloadTaskRequest {
    body: GoLoadDeleteDownloadTaskRequest;
}

export interface GoLoadServiceGetDownloadTaskFileRequest {
    body: GoLoadGetDownloadTaskFileRequest;
}

export interface GoLoadServiceGetDownloadTaskListRequest {
    body: GoLoadGetDownloadTaskListRequest;
}

export interface GoLoadServiceStreamDataRequest {
    message?: string;
}

export interface GoLoadServiceUpdateDownloadTaskRequest {
    body: GoLoadUpdateDownloadTaskRequest;
}

/**
 * 
 */
export class GoLoadServiceApi extends runtime.BaseAPI {

    /**
     */
    async goLoadServiceCreateAccountRaw(requestParameters: GoLoadServiceCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoLoadCreateAccountResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceCreateAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/CreateAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadCreateAccountRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoLoadCreateAccountResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceCreateAccount(requestParameters: GoLoadServiceCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoLoadCreateAccountResponse> {
        const response = await this.goLoadServiceCreateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceCreateDownloadTaskRaw(requestParameters: GoLoadServiceCreateDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoLoadCreateDownloadTaskResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceCreateDownloadTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/CreateDownloadTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadCreateDownloadTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoLoadCreateDownloadTaskResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceCreateDownloadTask(requestParameters: GoLoadServiceCreateDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoLoadCreateDownloadTaskResponse> {
        const response = await this.goLoadServiceCreateDownloadTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceCreateSessionRaw(requestParameters: GoLoadServiceCreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoLoadCreateSessionResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceCreateSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/CreateSession`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadCreateSessionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoLoadCreateSessionResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceCreateSession(requestParameters: GoLoadServiceCreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoLoadCreateSessionResponse> {
        const response = await this.goLoadServiceCreateSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceDeleteDownloadTaskRaw(requestParameters: GoLoadServiceDeleteDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceDeleteDownloadTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/DeleteDownloadTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadDeleteDownloadTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async goLoadServiceDeleteDownloadTask(requestParameters: GoLoadServiceDeleteDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.goLoadServiceDeleteDownloadTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceGetDownloadTaskFileRaw(requestParameters: GoLoadServiceGetDownloadTaskFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfGoLoadGetDownloadTaskFileResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceGetDownloadTaskFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/GetDownloadTaskFile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadGetDownloadTaskFileRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfGoLoadGetDownloadTaskFileResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceGetDownloadTaskFile(requestParameters: GoLoadServiceGetDownloadTaskFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfGoLoadGetDownloadTaskFileResponse> {
        const response = await this.goLoadServiceGetDownloadTaskFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceGetDownloadTaskListRaw(requestParameters: GoLoadServiceGetDownloadTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoLoadGetDownloadTaskListResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceGetDownloadTaskList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/GetDownloadTaskList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadGetDownloadTaskListRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoLoadGetDownloadTaskListResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceGetDownloadTaskList(requestParameters: GoLoadServiceGetDownloadTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoLoadGetDownloadTaskListResponse> {
        const response = await this.goLoadServiceGetDownloadTaskListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceStreamDataRaw(requestParameters: GoLoadServiceStreamDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfGoLoadStreamResponse>> {
        const queryParameters: any = {};

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfGoLoadStreamResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceStreamData(requestParameters: GoLoadServiceStreamDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfGoLoadStreamResponse> {
        const response = await this.goLoadServiceStreamDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async goLoadServiceUpdateDownloadTaskRaw(requestParameters: GoLoadServiceUpdateDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoLoadUpdateDownloadTaskResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling goLoadServiceUpdateDownloadTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/go_load.GoLoadService/UpdateDownloadTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoLoadUpdateDownloadTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoLoadUpdateDownloadTaskResponseFromJSON(jsonValue));
    }

    /**
     */
    async goLoadServiceUpdateDownloadTask(requestParameters: GoLoadServiceUpdateDownloadTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoLoadUpdateDownloadTaskResponse> {
        const response = await this.goLoadServiceUpdateDownloadTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
